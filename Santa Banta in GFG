const int N=2e6+7;
 struct DSU
{
    std::vector<int> f, siz, high, low;
    DSU(int n) : f(n), siz(n, 1), high(n), low(n)
    {
        std::iota(f.begin(), f.end(), 0);
        std::iota(low.begin(), low.end(), 0);
        std::iota(high.begin(), high.end(), 0);
    }
    int parent(int x)
    {
        while (x != f[x])
            x = f[x] = f[f[x]];
        return x;
    }
    bool same(int x, int y) { return parent(x) == parent(y); }
    bool merge(int x, int y)
    {
        x = parent(x);
        y = parent(y);
        if (x == y)
            return false;
        siz[x] += siz[y];
        f[y] = x;
        low[x] = std::min(low[y], low[x]);
        high[x] = std::max(high[y], high[x]);
        return true;
    }
    int size(int x) { return siz[parent(x)]; }
};

class Solution{
public:
    vector<bool>isPrime;//(N+1,1);
    vector<int>prime;
    void precompute(){
        isPrime.assign(N+1,1);
        isPrime[0]=isPrime[1]=0;
        for(int i=2;i*i<=N;i++){
            if(!isPrime[i]) continue;
            for(int j=i*i;j<=N;j+=i){
                isPrime[j]=0;
            }
        }
        for(int i=0;i<=N;i++){
            if(isPrime[i]) prime.push_back(i);
        }
    }
    int helpSanta(int n, int m, vector<vector<int>> &g){
        DSU d(n+1);
        for(int i=1;i<=n;i++){
            for(auto &j:g[i]){
                d.merge(i,j);
            }
        }
        int sz=0;
        for(int i=1;i<=n;i++) sz=max(sz,d.size(i));
        return sz!=1?prime[sz-1]:-1;
    }
};
