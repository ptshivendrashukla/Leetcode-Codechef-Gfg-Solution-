class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Initialize a queue to perform BFS
        Queue<Integer> queue = new LinkedList<>();
        // Mark the 0th vertex as visited and enqueue it
        boolean[] visited = new boolean[V];
        queue.add(0);
        visited[0] = true;

        // Result list to store the BFS traversal
        ArrayList<Integer> result = new ArrayList<>();

        // Perform BFS
        while (!queue.isEmpty()) {
            // Dequeue a vertex from the front of the queue
            int currentVertex = queue.poll();
            // Add it to the result list
            result.add(currentVertex);

            // Enqueue all adjacent vertices of the current vertex that are not visited yet
            for (int neighbor : adj.get(currentVertex)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }

        return result;
    }
}
